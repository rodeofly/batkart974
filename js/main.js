// Generated by CoffeeScript 2.2.3
(function() {
  var CardSet, ID, THEMES;

  THEMES = {};

  THEMES = {
    "Nombres & Calculs": {
      "classe": "NC",
      "citation": "Chinoi la la pa bien rende a moin la monai",
      "attendus": {
        "Utiliser et représenter les nombres(N;D;Q)": {
          "domaine": "D1",
          "notions": {
            "Entiers": {
              "Composer, décomposer, les grands nombres entiers": 1,
              "Comparer, encadrer ,repérer les nombres entiers": 1
            },
            "Fractions": {
              "Comprendre et utiliser la notion de fraction simple": 1,
              "Encadrer une fraction par deux entiers consécutifs": 2,
              "Établir des égalités entre fractions simples": 3
            },
            "Nombre décimal": {
              "Maîtriser l’équivalence, fraction décimale = nombre décimal": 1,
              "Comprendre et utiliser la notion de nombre décimal, et %": 2,
              "Comparer, encadrer ,repérer les nombres décimaux": 3
            }
          }
        },
        "Calculer avec des entiers et des décimaux": {
          "domaine": "D1",
          "notions": {
            "Techniques de calculs et ordre de grandeur d’un résultat": {
              "Avec des entiers": 1,
              "Avec des décimaux au centièmes": 2,
              "Avec des expressions utilisant des parenthèses": 3,
              "Critère de divisibilité": 3
            },
            "Réussir un calcul posé": {
              "Addition, soustraction, multiplication entre entiers": 1,
              "Division d’un entier par un entier à un chiffre": 2,
              "Addition, soustraction, multiplication entre décimaux": 3,
              "Division d’un décimal par un entier": 3
            }
          }
        },
        "Résoudre des problèmes": {
          "domaine": "D4",
          "notions": {
            "Utiliser une calculatrice pour présenter les résultats": {
              "Résoudre des problèmes (à 1 étape) avec des entiers (+;-;x)": 1,
              "Résoudre des problèmes (à 1 étape)avec des décimaux (4 opérations)": 2,
              "Résoudre des problèmes (à plusieurs étapes)avec des décimaux ": 3,
              "Résoudre des problèmes avec des fractions simples": 3
            }
          },
          "Organiser et gérer des données": {
            "Lire et utiliser un graphique ou un tableau": 1,
            "Construire des diagrammes en bâtons et des tableaux": 2,
            "Identifier et résoudre un problème de proportionnalité simple(dont echelle)": 2,
            "Construire des graphiques cartésiens et circulaires": 3,
            "Identifier et résoudre un problème de proportionnalité complexe (dont %)": 3
          }
        }
      }
    },
    "Grandeurs & mesures": {
      "classe": "GM",
      "citation": "Meziré y kass pa le bra",
      "attendus": {
        "Comparer, estimer, mesurer des grandeurs": {
          "domaine": "D5",
          "notions": {
            "Différencier aire/périmètre": {
              "Conservation de l’aire lors d’un découpage, mais pas du périmètre": 1,
              "Calculer le périmètre d’un polygone(sans formule)": 1,
              "Comparer, classer des surfaces, suivant leurs aires(sans formule)": 1,
              "Estimer le périmètre d’un cercle": 2,
              "Calculer le périmètre d’un rectangle & carré (avec formule)": 2,
              "Calculer l’aire d’un rectangle, d’un tri. rect. & carré (avec formule)": 2
            },
            "Triangles et cercles": {
              "Partition d’un polygone en triangle rectangle": 2,
              "Calculer l’aire d’une figure complexe(dont les triangles)": 3,
              "Calculer le périmètre et l’aire d’un disque": 3
            },
            "Angles": {
              "Identifier et comparer des angles avec gabarit": 1
            },
            "En 3D": {
              "Relier les unités de contenance et de volume 1L=1000cm3 ": 2,
              "Comptage de cube unité, pour estimer un volume": 2,
              "Formule du pavé droit": 3
            }
          }
        },
        "Utiliser le lexique, les unités,et les instruments": {
          "domaine": "D1",
          "notions": {
            "Multiples et sous-multiples des unités...": {
              "... de contenances et des masses": 1,
              "... de longueurs": 2,
              "... d’aires": 3,
              "... volume et contenance": 3
            },
            "Nommer et classer des angles": {
              "Identifier et comparer des angles avec des gabarits": 1,
              "Plat, obtus, droit, aigus": 2,
              "Utilisation du rapporteur, et notation conventionnelle": 3
            },
            "lecture de l’heure": {
              "Comprendre les relations unitaires": 1,
              "Comparer des durées": 2
            }
          }
        },
        "Résoudre des problèmes géométriques,physiques,économiques": {
          "domaine": "D5",
          "notions": {
            "Résoudre des problèmes de comparaison(sans formule)": 2,
            "Résoudre des problèmes de comparaison (avec formule)": 3,
            "Calculer une durée": 2,
            "Déterminer un instant(initial ou final)": 3
          }
        }
      }
    }
  };

  ({
    "Espace et géométrie": {
      "classe": "E&M",
      "citation": "Meziré y kass pa le bra",
      "attendus": {
        "Se repérer et se déplacer dans l’espace": {
          "domaine": "D1",
          "notions": {
            "Décrire et exécuter des déplacements sur un quadrillage": 1,
            "Décrire et exécuter des déplacements sur une carte": 2,
            "Décrire et exécuter des déplacements dans un pavé": 3
          }
        },
        "Reconnaître, décrire quelques solides": {
          "domaine": "D2",
          "notions": {
            "Nombres de faces, de sommets, d'arêtes": 1,
            "Compléter une perspective": 1,
            "Dessiner une perspective": 2,
            "Décomposer un solide complexe": 2
          }
        },
        "Reconnaître, décrire, exécuter & rédiger le tracé, des figures usuelles": {
          "domaine": "D2",
          "notions": {
            "Classer les triangles/côtés": 1,
            "Classer les quadrilatères/côtés": 2,
            "Cercles": 2,
            "Classer les triangles/angles": 3,
            "Classer les quadrilatères/diagonales et angles": 3,
            "Décomposer une figure complexe": 3
          }
        },
        "La symétrie": {
          "domaine": "D2",
          "notions": {
            "Jeu des 7 erreurs": 1,
            "Compléter le symétrique d’une figure, sur quadrillage": 2,
            "Compléter, tracer, le symétrique d’une figure": 3,
            "Reconnaître et dénombrer le(s) axe(s) de symétrie": 3,
            "La médiatrice d’un segment": 3
          }
        },
        "Résoudre des problèmes": {
          "domaine": "D2",
          "notions": {
            "Déterminer le plus court chemin entre 2 points": 1,
            "Reconnaître et tracer des perpendiculaires": 2,
            "Déterminer le plus court chemin entre un point et une droite": 2,
            "Équidistance entre 2 points": 2,
            "Reconnaître et tracer des parallèles": 3,
            "Équidistance entre 3 points": 3
          }
        }
      }
    },
    "Algorithmique & programmation": {
      "classe": "AP",
      "citation": "Y fé pa la bou avan la pli",
      "attendus": {
        "Écrire, mettre au point et exécuter un programme simple": {
          "domaine": "D1",
          "notions": {
            "Écriture d'un programme": {
              "Écrire, mettre au point (tester, corriger) et exécuter un programme en réponse à un programme donné": 1
            },
            "Programmation en parallèle": {
              "Écrire un programme dans lequel des actions sont déclenchées par des évènements extérieurs": 1,
              "Programmer des scripts se déroulant en parallèle": 1,
              "Déclenchement d'une action par un événement": 1
            },
            "Éléments algorithmiques": {
              "Notion de variable informatique": 1,
              "Utilisation de boucles": 1,
              "Utilisation d'instructions conditionnelles": 1
            }
          }
        }
      }
    }
  });

  console.log(JSON.stringify(THEMES));

  ID = 1;

  CardSet = class CardSet {
    constructor(theme1) {
      var a, attendu, attenduV, carte, html, i, id, j, n, niveau, nombre_attendus, nombre_notions, notion, notionV, notionsV, numero_attendu, numero_notion, recto, ref, ref1, ref2, ref3, ref4, savoirfaire, savoirfaires, savoirfairesV, verso;
      this.theme = theme1;
      this.attendus = THEMES[this.theme]['attendus'];
      this.set = [];
      numero_attendu = 0;
      nombre_attendus = Object.keys(this.attendus).length;
      console.log(`theme:${this.theme} - na:${nombre_attendus}`);
      for (attendu in this.attendus) {
        numero_attendu++;
        numero_notion = 0;
        nombre_notions = Object.keys(THEMES[this.theme]['attendus'][attendu]['notions']).length;
        ref = THEMES[this.theme]['attendus'][attendu]['notions'];
        for (notion in ref) {
          savoirfaires = ref[notion];
          id = ID++;
          numero_notion++;
          html = `<div class='face recto ${THEMES[this.theme]['classe']}'> \n  <div class='header ${THEMES[this.theme]['classe']}'>\n      <div class='header logo ${THEMES[this.theme]['classe']}'></div>\n      <div id='t${id}' class='header title ${THEMES[this.theme]['classe']}'>${this.theme}</div>\n  </div>\n  <div id='s${id}'  class='content ${THEMES[this.theme]['classe']}'>\n  <div class='attendu ${THEMES[this.theme]['attendus'][attendu]['domaine']}'>\n    ${attendu}\n  </div>\n  <div class='carteID'>${id}</div> \n  <div class='citation'>${THEMES[this.theme]['citation']}</div>\n</div>`;
          recto = $(html);
          html = "";
          for (n = i = 1, ref1 = nombre_attendus; (1 <= ref1 ? i <= ref1 : i >= ref1); n = 1 <= ref1 ? ++i : --i) {
            if (n === numero_attendu) {
              html += `<img src='./css/icones/checkbox_checked_target.png'>${n}`;
            } else {
              html += `<img src='./css/icones/checkbox_unchecked_target.png'>${n}`;
            }
          }
          html += `<div class='notion'>${notion}</div>`;
          for (n = j = 1, ref2 = nombre_notions; (1 <= ref2 ? j <= ref2 : j >= ref2); n = 1 <= ref2 ? ++j : --j) {
            if (n === numero_notion) {
              html += `<img class='img_chkbox' src='./css/icones/checkbox_checked.png'>${n}`;
            } else {
              html += `<img class='img_chkbox' src='./css/icones/checkbox_unchecked.png'>${n}`;
            }
          }
          recto.find(`#s${id}`).append(html);
          verso = $(`<div class='face verso ${THEMES[this.theme]['classe']}'></div>`);
          html = `<div class='header ${THEMES[this.theme]['classe']}'>`;
          html = `<div class='header ${THEMES[this.theme]['classe']}'>\n<div class='header logo ${THEMES[this.theme]['classe']}'></div>\n<div id='t${id}' class='header competences ${THEMES[this.theme]['classe']}'>`;
          if (recto.find(`#s${id} .attendu`).hasClass("D1")) {
            html += "<div class='competence representer'></div>";
            html += "<div class='competence modeliser'></div>";
            html += "<div class='competence communiquer'></div>";
          }
          if (recto.find(`#s${id} .attendu`).hasClass("D2")) {
            html += "<div class='competence chercher'></div>";
            html += "<div class='competence modeliser'></div>";
            html += "<div class='competence raisonner'></div>";
          }
          if (recto.find(`#s${id} .attendu`).hasClass("D3")) {
            html += "<div class='competence raisonner'></div>";
            html += "<div class='competence communiquer'></div>";
          }
          if (recto.find(`#s${id} .attendu`).hasClass("D4")) {
            html += "<div class='competence chercher'></div>";
            html += "<div class='competence modeliser'></div>";
            html += "<div class='competence raisonner'></div>";
            html += "<div class='competence calculer'></div>";
          }
          if (recto.find(`#s${id} .attendu`).hasClass("D5")) {
            html += "<div class='competence representer'></div>";
          }
          html += "</div></div>";
          verso.append(html);
          verso.append("<ul id='attendus'></ul>");
          a = 0;
          ref3 = THEMES[this.theme]['attendus'];
          for (attenduV in ref3) {
            notionsV = ref3[attenduV];
            a++;
            if (a === numero_attendu) {
              console.log(attenduV);
              verso.find("#attendus").append(`<li class='attendu content ${THEMES[this.theme]['classe']}'>\n  <div class='target'>${attenduV}</div>\n  <ol id='notions'></ol>\n</li>`);
              n = 0;
              ref4 = notionsV.notions;
              for (notionV in ref4) {
                savoirfairesV = ref4[notionV];
                n++;
                if (n === numero_notion) {
                  verso.find("#notions").append(`<li class='notion'>${notionV}\n  <ul id='savoirfaires'></ul>\n</li>`);
                  for (savoirfaire in savoirfairesV) {
                    niveau = savoirfairesV[savoirfaire];
                    verso.find("#savoirfaires").append(`<li>${savoirfaire}: <img class='star' src='img/${niveau}star.png'></li>`);
                  }
                } else {
                  verso.find("#notions").append(`<li class='notion'>${notionV}</li>`);
                }
              }
            } else {
              verso.find("#attendus").append(`<li class='attendu'><div class='target'>${attenduV}</div></li>`);
            }
          }
          carte = $("<div></div>");
          carte.append(`<div id='' class='carte'></div>`);
          carte.find(".carte").append(recto).append(verso);
          this.set.push(carte.html());
        }
      }
    }

  };

  $(function() {
    var batkart;
    batkart = function(file) {
      return $.getJSON(file, function(data) {
        var i, j, len, len1, ref, s, set, theme, themes;
        THEMES = data;
        themes = Object.keys(THEMES);
        $(".deck").empty();
        for (i = 0, len = themes.length; i < len; i++) {
          theme = themes[i];
          set = new CardSet(theme);
          ref = set.set;
          for (j = 0, len1 = ref.length; j < len1; j++) {
            s = ref[j];
            $(".deck").append(s);
          }
        }
        $(".deck").sortable();
        $(".verso").hide();
        return $(".carte").on("click", function() {
          return $(this).find(".recto, .verso").toggle();
        });
      });
    };
    $("#toggle").on("click", function() {
      ID = 1;
      return $(".recto, .verso").toggle();
    });
    $("#cycle3").on("click", function() {
      ID = 1;
      return batkart("cycle3.json");
    });
    return $("#cycle4").on("click", function() {
      ID = 1;
      return batkart("cycle4.json");
    });
  });

}).call(this);
