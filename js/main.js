// Generated by CoffeeScript 2.2.3
(function() {
  var CardSet, ID, THEMES;

  THEMES = {};

  ID = 1;

  //console.log JSON.stringify THEMES
  CardSet = class CardSet {
    constructor(theme1, cycle1) {
      var $carte, $recto, $verso, a, attendu, attenduV, carte, domainClass, html, i, id, j, n, niveau, nombre_attendus, nombre_notions, notion, notionV, notionsV, numero_attendu, numero_notion, ref, ref1, ref2, ref3, ref4, savoirfaire, savoirfaires, savoirfairesV;
      this.theme = theme1;
      this.cycle = cycle1;
      this.attendus = THEMES[this.theme]['attendus'];
      this.set = [];
      numero_attendu = 0;
      nombre_attendus = Object.keys(this.attendus).length;
      $carte = $($("#carteObject").html());
      $recto = $carte.find(".recto");
      $verso = $carte.find(".verso");
      for (attendu in this.attendus) {
        numero_attendu++;
        numero_notion = 0;
        nombre_notions = Object.keys(THEMES[this.theme]['attendus'][attendu]['notions']).length;
        ref = THEMES[this.theme]['attendus'][attendu]['notions'];
        for (notion in ref) {
          savoirfaires = ref[notion];
          id = ID++;
          numero_notion++;
          domainClass = THEMES[this.theme]['attendus'][attendu]['domaine'];
          
          //recto de la carte
          $carte.find(".bleeding.recto").attr("data-id", `${id}r`);
          $recto.attr("data-id", `${id}r`);
          $recto.attr("data-theme", THEMES[this.theme]['classe']);
          $recto.find(".carteID").html(id);
          $recto.find(".cycle").html(this.cycle);
          $recto.find(".theme").html(this.theme);
          $recto.find(".logo").attr("data-theme", THEMES[this.theme]['classe']);
          $recto.find(".attendu-title").html(attendu);
          $recto.find(".attendu-title").attr("data-domaine", domainClass);
          $recto.find(".citation").html(THEMES[this.theme]['citation']);
          $recto.find(".notion").html(notion);
          // Mise en place des cibles par attendu de fin de cycle
          html = "";
          for (n = i = 1, ref1 = nombre_attendus; (1 <= ref1 ? i <= ref1 : i >= ref1); n = 1 <= ref1 ? ++i : --i) {
            if (n === numero_attendu) {
              html += `<div class='tg-icon chkbox-checked'></div>${n}`;
            } else {
              html += `<div class='tg-icon chkbox-unchecked'></div>${n}`;
            }
          }
          $recto.find(".attendus-targets").html(html);
          
          // Mise en place des checkbox par notion d'attendu
          html = "";
          for (n = j = 1, ref2 = nombre_notions; (1 <= ref2 ? j <= ref2 : j >= ref2); n = 1 <= ref2 ? ++j : --j) {
            if (n === numero_notion) {
              html += `<img class='no-icon chkbox-checked'>${n}`;
            } else {
              html += `<img class='no-icon chkbox-unchecked'>${n}`;
            }
          }
          $recto.find(".notions-targets").html(html);
          
          //verso de la carte
          $carte.find(".bleeding.verso").attr("data-id", `${id}v`);
          $verso.attr("data-theme", THEMES[this.theme]['classe']);
          $verso.attr("data-id", `${id}v`);
          $verso.find(".carteID").html(id);
          $verso.find(".cycle").html(this.cycle);
          $verso.find(".theme").html(`<span>${this.theme}</span>`);
          $verso.find(".logo").attr("data-theme", THEMES[this.theme]['classe']);
          html = "";
          switch ($recto.find(".attendu-title").attr("data-domaine")) {
            case "D1":
              html += "<div class='competence representer'></div>";
              html += "<div class='competence modeliser'></div>";
              html += "<div class='competence communiquer'></div>";
              break;
            case "D2":
              html += "<div class='competence chercher'></div>";
              html += "<div class='competence modeliser'></div>";
              html += "<div class='competence raisonner'></div>";
              break;
            case "D3":
              html += "<div class='competence raisonner'></div>";
              html += "<div class='competence communiquer'></div>";
              break;
            case "D4":
              html += "<div class='competence chercher'></div>";
              html += "<div class='competence modeliser'></div>";
              html += "<div class='competence raisonner'></div>";
              html += "<div class='competence calculer'></div>";
              break;
            case "D5":
              html += "<div class='competence representer'></div>";
          }
          $verso.find(".competences").empty().html(html);
          a = 0;
          $verso.find(".attendus-content").empty();
          ref3 = THEMES[this.theme]['attendus'];
          for (attenduV in ref3) {
            notionsV = ref3[attenduV];
            a++;
            if (a === numero_attendu) {
              //console.log attenduV
              $verso.find(".attendus-content").append(`<li class='attendu content ${THEMES[this.theme]['classe']}'>\n  <div class="attenduV">${attenduV}</div>\n  <ol class='notions'></ol>\n</li>`);
              n = 0;
              ref4 = notionsV.notions;
              for (notionV in ref4) {
                savoirfairesV = ref4[notionV];
                n++;
                if (n === numero_notion) {
                  $verso.find(".notions").append(`<li class='notion'>${notionV}\n  <ul class='savoirfaires'></ul>\n</li>`);
                  for (savoirfaire in savoirfairesV) {
                    niveau = savoirfairesV[savoirfaire];
                    $verso.find(".savoirfaires").append(`<li>${savoirfaire}: \n  <img class='star' src='img/${niveau}star.png'>\n</li>`);
                  }
                } else {
                  $verso.find(".notions").append(`<li class='notion'>${notionV}</li>`);
                }
              }
            } else {
              $verso.find(".attendus-content").append(`<li class='attendu'>${attenduV}\n</li>`);
            }
          }
          carte = $("<div></div>");
          carte.append($carte);
          this.set.push(carte.html());
        }
      }
    }

  };

  $(function() {
    var batkart, generateCanvas, zip;
    zip = new JSZip();
    batkart = function(file, cycle) {
      return $.getJSON(file, function(data) {
        var i, j, len, len1, ref, s, set, theme, themes;
        THEMES = data;
        themes = Object.keys(THEMES);
        $(".deck").empty();
        for (i = 0, len = themes.length; i < len; i++) {
          theme = themes[i];
          set = new CardSet(theme, cycle);
          ref = set.set;
          for (j = 0, len1 = ref.length; j < len1; j++) {
            s = ref[j];
            $(".deck").append(s);
          }
        }
        return $(".deck").sortable();
      });
    };
    //$( ".verso" ).hide()
    generateCanvas = function(carte, id, zip, deferred) {
      return html2canvas(carte).then(function(canvas) {
        var imgUrl;
        imgUrl = canvas.toDataURL();
        zip.file(`carte-${id}.png`, imgUrl.split('base64,')[1], {
          base64: true
        });
        deferred.resolve();
        return $("#info").html(`Carte ${id} traitÃ© !`);
      });
    };
    $("#toPNG").on("click", function() {
      var $selected_bleedings, deferreds;
      $(this).prop("disabled", true);
      deferreds = [];
      $selected_bleedings = $(".bleeding:visible");
      $selected_bleedings.each(function() {
        var deferred, id;
        id = $(this).attr("data-id");
        $("#info").html(`Envoi de la carte ${id}`);
        deferred = $.Deferred();
        deferreds.push(deferred.promise());
        return generateCanvas($(this)[0], id, zip, deferred);
      });
      $("#info").html("Travail en cours...");
      return $.when.apply($, deferreds).then(function() {
        $("#toPNG").prop("disabled", false);
        return zip.generateAsync({
          type: "blob"
        }).then(function(content) {
          var blobLink, link;
          link = document.createElement('a');
          blobLink = window.URL.createObjectURL(content);
          link.addEventListener('click', function(ev) {
            link.href = blobLink;
            return link.download = 'cartes.zip';
          }, false);
          return link.click();
        });
      });
    });
    $("#cycle3").on("click", function() {
      ID = 1;
      return batkart("cycle3.json", "Cycle 3");
    });
    return $("#cycle4").on("click", function() {
      ID = 1;
      return batkart("cycle4.json", "Cycle 4");
    });
  });

}).call(this);
